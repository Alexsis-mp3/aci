version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_DEV_PORTAL_URL: ${NEXT_PUBLIC_DEV_PORTAL_URL}
        NEXT_PUBLIC_ENVIRONMENT: ${NEXT_PUBLIC_ENVIRONMENT:-production}
        NEXT_PUBLIC_AUTH_URL: ${NEXT_PUBLIC_AUTH_URL}
        NEXT_PUBLIC_VERCEL_ANALYTICS_ID: ${NEXT_PUBLIC_VERCEL_ANALYTICS_ID}
        NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_URL_WITH_SSL=${DATABASE_URL_WITH_SSL}
      - SERVER_PROPELAUTH_AUTH_URL=${SERVER_PROPELAUTH_AUTH_URL}
      - SERVER_PROPELAUTH_API_KEY=${SERVER_PROPELAUTH_API_KEY}
      - SERVER_SVIX_SIGNING_SECRET=${SERVER_SVIX_SIGNING_SECRET}
      - SERVER_OPENAI_API_KEY=${SERVER_OPENAI_API_KEY}
      - SERVER_SIGNING_KEY=${SERVER_SIGNING_KEY}
      - SERVER_ACI_DNS=${SERVER_ACI_DNS}
      - SERVER_DEV_PORTAL_URL=${SERVER_DEV_PORTAL_URL}
      - SERVER_STRIPE_SECRET_KEY=${SERVER_STRIPE_SECRET_KEY}
      - SERVER_STRIPE_WEBHOOK_SIGNING_SECRET=${SERVER_STRIPE_WEBHOOK_SIGNING_SECRET}
      - LOGFIRE_WRITE_TOKEN=${LOGFIRE_WRITE_TOKEN}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`acidevbackend.realsolutions.live`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - database

  # Database Service (if using local PostgreSQL)
  database:
    image: pgvector/pgvector:pg16
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-aci_dev}
      - POSTGRES_USER=${POSTGRES_USER:-aci_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aci_user} -d ${POSTGRES_DB:-aci_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
